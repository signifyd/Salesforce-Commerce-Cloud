/**
* Main Signifyd Script File
* Two main public methods are Call and Callback
* 
* Call - for export order info to.
* Callback - for receive data about guarantie Status.
*
*/
importPackage(dw.util);
importPackage(dw.svc);
importPackage(dw.net);
importPackage(dw.io);
importPackage(dw.crypto);
importPackage(dw.order);
importPackage(dw.system);

var sitePrefs: SitePreferences = dw.system.Site.getCurrent().getPreferences();
var APIkey: String = sitePrefs.getCustom()["SignifydApiKey"];
var HoldBySignified = sitePrefs.getCustom()["SignifydHoldOrderEnable"];
var EnableCartridge = sitePrefs.getCustom()["SignifydEnableCartridge"];
var Transaction = require('dw/system/Transaction');
var signifydInit = require('int_signifyd/cartridge/scripts/service/signifydInit');
/**
 * Send Signifyd order info and   
 * store case id as an attribute of order in DW.
 * 
 * @param {order} - Order that just have been placed.
 * @return 1 on succes, 0 on error.
 */
exports.Call = function (order: Order): Number {
    if (EnableCartridge) {
        if (order && order.currentOrderNo) {
            Logger.getLogger("Signifyd", "signifyd").info("Info: API call for order {0}", order.currentOrderNo);
            var params = getParams(order);
            Logger.getLogger("Signifyd", "signifyd").debug("Debug: API call body: {0}", JSON.stringify(params));
            var service = signifydInit.createCase();
            if (service) {
                try {
                    saveRetryCount(order);
                    var result: Result = service.call(params);
                    if (result.ok) {
                        var answer: Object = JSON.parse(result.object);
                        var caseId = answer.investigationId;
                        Transaction.wrap(function () {
                            order.custom.SignifydCaseID = caseId;
                        });
                        return caseId;
                    } else {
                        Logger.getLogger("Signifyd", "signifyd").error("Error: {0} : {1}", result.error, JSON.parse(result.errorMessage).message);
                    }
                } catch (e) {
                    Logger.getLogger("Signifyd", "signifyd").error("Error: API Call was interrupted unexpectedly. Exception: {0}", e.message);
                }
            } else {
                Logger.getLogger("Signifyd", "signifyd").error("Error: Service Please provide correct order for Call method");
            }
        } else {
            Logger.getLogger("Signifyd", "signifyd").error("Error: Please provide correct order for Call method");
        }
    }

    return 0;
}

/**
 * Sets or increments the retry count for the Order (used in the Job)
 * @param {order} - the current order being integrated
 */
function saveRetryCount(order) {
    Transaction.wrap(function() {
        if (empty(order.custom.SignifydRetryCount)) {
            order.custom.SignifydRetryCount = 0;
        } else {
            order.custom.SignifydRetryCount = order.custom.SignifydRetryCount + 1;
        }
    });
}

/**
 * Receive decision about case related to order.
 * Validate signifyd server by api key and 
 * delegate processing to next method.
 * 
 * @param {request} - http request with body and headers.
 */
exports.Callback = function (request: dw.system.Request) {
    if (EnableCartridge) {
        try {
            var body: String = request.httpParameterMap.getRequestBodyAsString();
            var headers: Map = request.getHttpHeaders();
            Logger.getLogger("Signifyd", "signifyd").debug("Debug: API callback header x-signifyd-topic: {0}", headers.get("x-signifyd-topic"));
            Logger.getLogger("Signifyd", "signifyd").debug("Debug: API callback body: {0}", body);
            var parsedBody: String = JSON.parse(body);
            var hmacKey: String = headers.get("x-signifyd-sec-hmac-sha256");
            var crypt: dw.crypto.Mac = new Mac(dw.crypto.Mac.HMAC_SHA_256);
            var cryptedBody: Bytes = crypt.digest(body, APIkey);
            //var cryptedBody: Bytes = crypt.digest(body, "ABCDE"); //test APIKEY
            var cryptedBodyString = Encoding.toBase64(cryptedBody);
            if (cryptedBodyString.equals(hmacKey)) {
                process(parsedBody);
            } else {
                Logger.getLogger("Signifyd", "signifyd").error("An error===>>>: Request is not Authorized. Please check an API key.");
            }
        } catch (e) {
            var ex = e;
            Logger.getLogger("Signifyd", "signifyd").error("Error: API Callback processing was interrupted because:{0}", e.message);
        }
    }
}

/**
 * Generates an unique ID to use in Signifyd Fingerprint
 * 
 * @return {deviceFingerprintID} - The generated finger print id
 */
function getOrderSessionId() {
    if (EnableCartridge) {
        var storeURL = dw.web.URLUtils.home().toString();
        var limitedLengthURL = storeURL.length > 50 ? storeURL.substr(0, 50) : storeURL;
        var basketID = dw.order.BasketMgr.getCurrentOrNewBasket().getUUID();
        var orderSessionId = dw.util.StringUtils.encodeBase64(limitedLengthURL + basketID);
        return orderSessionId;
    }
}

exports.getOrderSessionId = getOrderSessionId;

/**
 * Save the orderSessionId to the order
 * @param {order} - the recently created order
 * @param {orderSessionId} - the order session id for the signifyd fingerprint
 */
function setOrderSessionId(order, orderSessionId) {
    if (EnableCartridge && orderSessionId) {
        Transaction.wrap(function() {
            order.custom.SignifydOrderSessionId = orderSessionId;
        });
    }
}

exports.setOrderSessionId = setOrderSessionId;

/**
 * Process data about order when decision was received.
 * 
 * @param {body} - body of request from Signifyd.
 */
function process(body: Object) {
    var order: Order = OrderMgr.getOrder(body.orderId);
    var orderId: String = body.orderId;
    var receivedScore: String = body.score.toString();
    var roundScore: String = receivedScore.substring(0, receivedScore.indexOf("."));
    var score: Number = new Number(roundScore);
    if (order) {
        Transaction.wrap(function () {
            var orderUrl: String = body.orderUrl;
            var modifiedUrl: String = orderUrl.replace(/(.+)\/(\d+)\/(.+)/, "https://www.signifyd.com/cases/$2");
            order.custom.SignifydOrderURL = modifiedUrl;
            order.custom.SignifydFraudScore = score;
            if (body.guaranteeDisposition) {
                if (body.guaranteeDisposition != "APPROVED") {
                    order.custom.SignifydGuaranteeDisposition = "declined";
                } else {
                    order.custom.SignifydGuaranteeDisposition = "approved";
                }
            }

            if (HoldBySignified) { //processing is enabled in site preferences
                if (body.guaranteeDisposition != "APPROVED") {
                    order.exportStatus = 0; //NOTEXPORTED
                } else {
                    order.exportStatus = 2; //Ready to export
                }
            }
        });
    } else {
        Logger.getLogger("Signifyd", "signifyd").error("An error===>>>: There is no order with ID = {0}", body.orderId);
    }
}

/**
 * Converts an Order into JSON format 
 * acceptable on Stringifyd side
 * 
 * @param {order} - Order that just have been placed.
 * @return {result} - json objects describes Order.
 */
function getParams(order: Order) {
    var cal: Calendar = new Calendar(order.creationDate);
    var paymentInstruments: Collection = order.allProductLineItems[0].lineItemCtnr.getPaymentInstruments();
    var paymentTransaction: PaymentTransaction = paymentInstruments[0].getPaymentTransaction();
    var paymentInstrument: PaymentInstrument = paymentTransaction.getPaymentInstrument();
    var paymentProcessor: PaymentProcessor = paymentTransaction.getPaymentProcessor();
    return {
        purchase: {
            "browserIpAddress": order.remoteHost,
            "orderId": order.currentOrderNo,
            "createdAt": StringUtils.formatCalendar(cal, "yyyy-MM-dd'T'HH:mm:ssZ"),
            "paymentGateway": paymentProcessor.ID,
            "paymentMethod": paymentInstrument.getPaymentMethod(),
            "transactionId": paymentTransaction.transactionID,
            "currency": paymentTransaction.amount.currencyCode,
            "avsResponseCode": "",
            "cvvResponseCode": "",
            "orderChannel": "",
            "totalPrice": order.getTotalGrossPrice().value,
            "products": getProducts(order.productLineItems),
            "shipments": getShipments(order.shipments),
            "orderSessionId": order.custom.SignifydOrderSessionId
        },
        recipient: getRecipient(order.shipments[0], order.customerEmail),
        card: {
            "cardHolderName": paymentInstrument.creditCardHolder,
            "bin": "",
            "last4": paymentInstrument.creditCardNumberLastDigits,
            "expiryMonth": paymentInstrument.creditCardExpirationMonth,
            "expiryYear": paymentInstrument.creditCardExpirationYear,
            "billingAddress": {
                "streetAddress": order.billingAddress.address1,
                "unit": order.billingAddress.address2,
                "city": order.billingAddress.city,
                "provinceCode": order.billingAddress.stateCode,
                "postalCode": order.billingAddress.postalCode,
                "countryCode": order.billingAddress.countryCode.value,
            }
        },
        userAccount: getUser(order),
        seller: {}, //getSeller()
        platformAndClient: getPlatform()
    }
}

/**
 * Get information about the SFCC version
 * @return {result} - json describing the version
 */
function getPlatform() {
    return {
        "storePlatform"           : "Salesforce Commerce Cloud",
        "storePlatformVersion"    : String(dw.system.System.getCompatibilityMode()), // returns a string with the platform version: 1602
        "signifydClientApp"       : "Salesforce Commerce Cloud",
        "signifydClientAppVersion": "19.2" // current year + number of certifications in the year
    }
}

/**
 * Get Information about customer in JSON format 
 * acceptable on Stringifyd side
 * 
 * @param {shipment: Shipment class, email: String from order properties} .
 * @return {result} - json objects describes User.
 */
function getRecipient(shipment: Shipment, email: String) {
    return {
        "fullName": shipment.shippingAddress.fullName,
        "confirmationEmail": email,
        "confirmationPhone": shipment.shippingAddress.phone,
        "organization": shipment.shippingAddress.companyName,
        "deliveryAddress": {
            "streetAddress": shipment.shippingAddress.address1,
            "unit": shipment.shippingAddress.address2,
            "city": shipment.shippingAddress.city,
            "provinceCode": shipment.shippingAddress.stateCode,
            "postalCode": shipment.shippingAddress.postalCode,
            "countryCode": shipment.shippingAddress.countryCode.value
        }
    }
}

/**
 * Get list of shipments in JSON format 
 * acceptable on Stringifyd side
 * 
 * @param {shipments} - array of shipments.
 * @return {result} - array of shipments as json objects.
 */

function getShipments(shipments: Array) {
    var Ashipments: Array = new Array();
    for (var i = 0; i < shipments.length; i++) {
        var shipment = shipments[i];
        Ashipments.push({
            "shipper": shipment.standardShippingLineItem.ID,
            "shippingMethod": shipment.shippingMethod.displayName,
            "shippingPrice": shipment.shippingTotalGrossPrice.value,
            "trackingNumber": shipment.trackingNumber
        });
    }
    return Ashipments;
}

/**
 * Get Information about customer in JSON format 
 * acceptable on Stringifyd side
 * 
 * @param {order} - Order that just have been placed.
 * @return {result} - json objects describes User.
 */

function getUser(order: Order) {
    if (order.customer.profile) {
        var phone: String;
        if (order.customer.profile.phoneMobile) phone = order.customer.profile.phoneMobile;
        if (order.customer.profile.phoneBusiness) phone = order.customer.profile.phoneBusiness;
        if (order.customer.profile.phoneHome) phone = order.customer.profile.phoneHome;
        var creationCal: Calendar = new Calendar(order.customer.profile.getCreationDate());
        var updateCal: Calendar = new Calendar(order.customer.profile.getLastModified());
        return {
            "email": order.customer.profile.email,
            "username": order.customerName,
            "phone": phone,
            "createdDate": StringUtils.formatCalendar(creationCal, "yyyy-MM-dd'T'HH:mm:ssZ"),
            "accountNumber": order.customer.ID,
            "lastUpdateDate": StringUtils.formatCalendar(updateCal, "yyyy-MM-dd'T'HH:mm:ssZ")
        }
    } else {
        return {
            "email": order.customerEmail,
            "username": order.customerName,
            "phone": "",
            "createdDate": "",
            "accountNumber": order.customerNo,
        }
    }
}

/**
 * Get information about seller in JSON format 
 * 
 * @return {result} - json object with String attributes.
 */

function getSeller() {
    var settings = sitePrefs.getCustom();//["SignifydApiKey"];
    return {
        name: settings["SignifydSellerName"],
        domain: settings["SignifydSellerDomain"],
        shipFromAddress: {
            "streetAddress": settings["SignifydFromStreet"],
            "unit": settings["SignifydFromUnit"],
            "city": settings["SignifydFromCity"],
            "provinceCode": settings["SignifydFromState"],
            "postalCode": settings["SignifydFromPostCode"],
            "countryCode": settings["SignifydFromCountry"],
            "latitude": settings["SignifydFromLatitude"],
            "longitude": settings["SignifydFromLongitude"]
        },
        corporateAddress: {
            "streetAddress": settings["SignifydCorporateStreet"],
            "unit": settings["SignifydCorporateUnit"],
            "city": settings["SignifydCorporateCity"],
            "provinceCode": settings["SignifydCorporateState"],
            "postalCode": settings["SignifydCorporatePostCode"],
            "countryCode": settings["SignifydCorporateCountry"],
            "latitude": settings["SignifydCorporateLatitude"],
            "longitude": settings["SignifydCorporateLongitude"]
        }
    };
}

/**
 * Get list of products in JSON format 
 * acceptable on Stringifyd side
 * 
 * @param {products} - array of products.
 * @return {result} - array of products as json objects.
 */

function getProducts(products: Array) {
    var result: Array = new Array();
    for (var i = 0; i < products.length; i++) {
        var product = products[i];
        result.push({
            itemId: product.productID,
            itemName: product.productName,
            itemUrl: dw.web.URLUtils.abs('Product-Show', 'pid', product.productID).toString(),
            itemQuantity: product.quantityValue,
            itemPrice: product.grossPrice.value,
        });
    }
    return result;
}